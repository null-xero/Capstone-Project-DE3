{
  "plugin_type": "loaders",
  "name": "target-bigquery",
  "namespace": "target_bigquery",
  "variant": "z3z1ma",
  "label": "Google BigQuery",
  "docs": "https://hub.meltano.com/loaders/target-bigquery--z3z1ma",
  "repo": "https://github.com/z3z1ma/target-bigquery",
  "pip_url": "git+https://github.com/z3z1ma/target-bigquery.git",
  "executable": "target-bigquery",
  "description": "BigQuery loader",
  "logo_url": "https://hub.meltano.com/assets/logos/loaders/bigquery.png",
  "capabilities": [
    "about",
    "schema-flattening",
    "stream-maps"
  ],
  "settings_group_validation": [
    [
      "dataset",
      "method",
      "project"
    ]
  ],
  "settings": [
    {
      "name": "batch_size",
      "kind": "integer",
      "value": 500,
      "label": "Batch Size",
      "description": "The maximum number of rows to send in a single batch or commit."
    },
    {
      "name": "bucket",
      "kind": "string",
      "label": "Bucket",
      "description": "The GCS bucket to use for staging data. Only used if method is gcs_stage."
    },
    {
      "name": "cluster_on_key_properties",
      "kind": "boolean",
      "value": false,
      "label": "Cluster On Key Properties",
      "description": "Determines whether to cluster on the key properties from the tap. Defaults to false. When false, clustering will be based on _sdc_batched_at instead."
    },
    {
      "name": "column_name_transforms.add_underscore_when_invalid",
      "kind": "boolean",
      "value": false,
      "label": "Column Name Transforms Add Underscore When Invalid",
      "description": "Add an underscore when a column starts with a digit"
    },
    {
      "name": "column_name_transforms.lower",
      "kind": "boolean",
      "value": false,
      "label": "Column Name Transforms Lower",
      "description": "Lowercase column names"
    },
    {
      "name": "column_name_transforms.quote",
      "kind": "boolean",
      "value": false,
      "label": "Column Name Transforms Quote",
      "description": "Quote columns during DDL generation"
    },
    {
      "name": "column_name_transforms.snake_case",
      "kind": "boolean",
      "value": false,
      "label": "Column Name Transforms Snake Case",
      "description": "Convert columns to snake case"
    },
    {
      "name": "credentials_json",
      "kind": "string",
      "label": "Credentials Json",
      "description": "A JSON string of your service account JSON file."
    },
    {
      "name": "credentials_path",
      "kind": "string",
      "label": "Credentials Path",
      "description": "The path to a gcp credentials json file."
    },
    {
      "name": "dataset",
      "kind": "string",
      "label": "Dataset",
      "description": "The target dataset to materialize data into."
    },
    {
      "name": "dedupe_before_upsert",
      "kind": "string",
      "value": false,
      "label": "Dedupe Before Upsert",
      "description": "This option is only used if `upsert` is enabled for a stream. The selection criteria for the stream's candidacy is the same as upsert. If the stream is marked for deduping before upsert, we will create a _session scoped temporary table during the merge transaction to dedupe the ingested records. This is useful for streams that are not unique on the key properties during an ingest but are unique in the source system. Data lake ingestion is often a good example of this where the same unique record may exist in the lake at different points in time from different extracts."
    },
    {
      "name": "denormalized",
      "kind": "boolean",
      "value": false,
      "label": "Denormalized",
      "description": "Determines whether to denormalize the data before writing to BigQuery. A false value will write data using a fixed JSON column based schema, while a true value will write data using a dynamic schema derived from the tap."
    },
    {
      "name": "fail_fast",
      "kind": "boolean",
      "value": true,
      "label": "Fail Fast",
      "description": "Fail the entire load job if any row fails to insert."
    },
    {
      "name": "flattening_enabled",
      "kind": "boolean",
      "label": "Flattening Enabled",
      "description": "'True' to enable schema flattening and automatically expand nested properties."
    },
    {
      "name": "flattening_max_depth",
      "kind": "integer",
      "label": "Flattening Max Depth",
      "description": "The max depth to flatten schemas."
    },
    {
      "name": "generate_view",
      "kind": "boolean",
      "value": false,
      "label": "Generate View",
      "description": "Determines whether to generate a view based on the SCHEMA message parsed from the tap. Only valid if denormalized=false meaning you are using the fixed JSON column based schema."
    },
    {
      "name": "location",
      "kind": "string",
      "value": "US",
      "label": "Location",
      "description": "The target dataset/bucket location to materialize data into."
    },
    {
      "name": "method",
      "kind": "options",
      "value": "storage_write_api",
      "label": "Method",
      "description": "The method to use for writing to BigQuery.",
      "options": [
        {
          "label": "Storage Write API",
          "value": "storage_write_api"
        },
        {
          "label": "Batch Job",
          "value": "batch_job"
        },
        {
          "label": "Gcs Stage",
          "value": "gcs_stage"
        },
        {
          "label": "Streaming Insert",
          "value": "streaming_insert"
        }
      ]
    },
    {
      "name": "options.max_workers",
      "kind": "integer",
      "label": "Options Max Workers",
      "description": "By default, each sink type has a preconfigured max worker pool limit. This sets an override for maximum number of workers in the pool."
    },
    {
      "name": "options.process_pool",
      "kind": "boolean",
      "value": false,
      "label": "Options Process Pool",
      "description": "By default we use an autoscaling threadpool to write to BigQuery. If set to true, we will use a process pool."
    },
    {
      "name": "options.storage_write_batch_mode",
      "kind": "boolean",
      "value": false,
      "label": "Options Storage Write Batch Mode",
      "description": "By default, we use the default stream (Committed mode) in the storage_write_api load method which results in streaming records which are immediately available and is generally fastest. If this is set to true, we will use the application created streams (Committed mode) to transactionally batch data on STATE messages and at end of pipe."
    },
    {
      "name": "overwrite",
      "kind": "string",
      "value": false,
      "label": "Overwrite",
      "description": "Determines if the target table should be overwritten on load. Defaults to false. A value of true will write to a temporary table and then overwrite the target table inside a transaction (so it is safe). A value of false will write to the target table directly (append). A value of an array of strings will evaluate the strings in order using fnmatch. At the end of the array, the value of the last match will be used. If not matched, the default value is false. This is mutually exclusive with the `upsert` option. If both are set, `upsert` will take precedence."
    },
    {
      "name": "partition_granularity",
      "kind": "options",
      "value": "month",
      "label": "Partition Granularity",
      "description": "The granularity of the partitioning strategy. Defaults to month.",
      "options": [
        {
          "label": "Year",
          "value": "year"
        },
        {
          "label": "Month",
          "value": "month"
        },
        {
          "label": "Day",
          "value": "day"
        },
        {
          "label": "Hour",
          "value": "hour"
        }
      ]
    },
    {
      "name": "project",
      "kind": "string",
      "label": "Project",
      "description": "The target GCP project to materialize data into."
    },
    {
      "name": "schema_resolver_version",
      "kind": "integer",
      "value": 1,
      "label": "Schema Resolver Version",
      "description": "The version of the schema resolver to use. Defaults to 1. Version 2 uses JSON as a fallback during denormalization. This only has an effect if denormalized=true"
    },
    {
      "name": "stream_map_config",
      "kind": "object",
      "label": "Stream Map Config",
      "description": "User-defined config values to be used within map expressions."
    },
    {
      "name": "stream_maps",
      "kind": "object",
      "label": "Stream Maps",
      "description": "Config object for stream maps capability. For more information check out [Stream Maps](https://sdk.meltano.com/en/latest/stream_maps.html)."
    },
    {
      "name": "timeout",
      "kind": "integer",
      "value": 600,
      "label": "Timeout",
      "description": "Default timeout for batch_job and gcs_stage derived LoadJobs."
    },
    {
      "name": "upsert",
      "kind": "string",
      "value": false,
      "label": "Upsert",
      "description": "Determines if we should upsert. Defaults to false. A value of true will write to a temporary table and then merge into the target table (upsert). This requires the target table to be unique on the key properties. A value of false will write to the target table directly (append). A value of an array of strings will evaluate the strings in order using fnmatch. At the end of the array, the value of the last match will be used. If not matched, the default value is false (append)."
    }
  ]
}